%{
#include <stdio.h>
#include "y.tab.h"  // Include the header file generated by Yacc

void yyerror(const char *s);
int yycolumn = 1; // Column number
%}

%option noyywrap

VALUEI [0-9]+
VALUEF {VALUEI}:{VALUEI}
IDENTIFIER [a-zA-Z_][a-zA-Z0-9_]*

COMMENT ;;.*

%%

"and"         { return KW_AND; }
"or"          { return KW_OR; }
"not"         { return KW_NOT; }
"equal"       { return KW_EQUAL; }
"less"        { return KW_LESS; }
"nil"         { return KW_NIL; }
"list"        { return KW_LIST; }
"append"      { return KW_APPEND; }
"concat"      { return KW_CONCAT; }
"set"         { return KW_SET; }
"deffun"      { return KW_DEFFUN; }
"for"         { return KW_FOR; }
"if"          { return KW_IF; }
"exit"        { return KW_EXIT; }
"load"        { return KW_LOAD; }
"print"       { return KW_DISP; }
"true"        { return KW_TRUE; }
"false"       { return KW_FALSE; }

"+"           { return OP_PLUS; }
"-"           { return OP_MINUS; }
"/"           { return OP_DIV; }
"*"           { return OP_MULT; }
"("           { return OP_OP; }
")"           { return OP_CP; }
","           { return OP_COMMA; }

{VALUEF}      { return VALUEF; }
{VALUEI}      { return VALUEI; }

{IDENTIFIER}  { return IDENTIFIER; }

{COMMENT}     { /* Ignore comments */ }

[ \t\n]+      { yycolumn += yyleng; }  // Ignore whitespace and update column

[^\n\t\(\)\+\-\/\*\,;]+ { yyerror("SYNTAX_ERROR"); }  // Invalid token

"(quit)"      { return 0; }  // Exit on (quit)

%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s at line %d, column %d: can not tokenize: %s\n", s, yylineno, yycolumn, yytext);
}

int main(int argc, char **argv) {
    if (argc > 1) {
        FILE *file = fopen(argv[1], "r");
        if (!file) {
            perror(argv[1]);
            return 1;
        }
        yyin = file;
    }
    yylex();
    return 0;
}